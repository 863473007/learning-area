数据库设计：
有效设计、高效访问

衡量尺度：
数据是否冗余
空间是否浪费
操作是否正常
访问是否低效

设计步骤：
	一、需求分析
		（因为要知道：数据是什么、数据存储特定、数据生命周期）
		1、数据是什么；（表名）
		2、数据有哪些属性； （表的属性）
		3、数据和属性各自有哪些特定；（属性约束）
	
	二、逻辑设计
		使用ER图对数据库进行逻辑建模
	
	三、物理设计
		使用什么用的DBMS
		
	四、维护优化
		1、新表；
		2、索引；
		3、大表拆分；
		

		
# 逻辑设计
存储方式有不同的设计：
	比如：用户信息和购物车信息
	可以将两者存到一张表中，也可以将两者分别存到不同的表中；
	
	通过数据库的规则进行选择，这就是数据库的范式：
	
	数据操作异常和数据冗余
	操作异常：
		插入异常：
		更新异常；
		删除异常
		
	数据冗余
	
第一范式：
	二维表，行和列
	
第二范式：
	符合第一范式：二维表；
	所有数据与数据表中的键（主键和候选键）有完全依赖关系。
	如果有哪些数据只和一个键的一部分有关，就得单独把他们变成另一个数据表
	
第三范式：
	键的字段之间没有相互依赖关系

BCNF：
	第三范式的加强，去掉属性间不必要的函数依赖
	
# 物理设计
	选DBMS
	定义数据库、表、字段的命名规范
	根据DBMS系统选择合适的字段了类型
	反范式化设计

## DBMS 选择
	常用有四种：oracle、SQLServer、Mysql、PgSql
	
	1.成本
		oracle、sqlServer 商业，收费策略
		mysql、PgSql 开源
	2、功能
		事务
	3、操作系统
		sqlServer支持在window上运行
		
	4、开发使用的语言
		sqlserver .net
	5、项目类型
		互联网、企业级
	
## MySQL 常用的存储引擎
	### MyISAM   5.5之前默认，不支持事务，读写高效（写的时候会对全表加锁（表级锁），大量的写入可能导致锁死），合适读很多，写很少的情况；
	### MRG_MySIAM  不支持事务，可以将多个MyISAM表合并成一个进行处理（表级锁），使用于分段归档，数据仓库
	### Innodb 支持事务，支持MVCC（多版本并发库）的行级锁，使用于事务处理
	### Archive 不支持事务，行级锁，只支持insert，select操作，倾向于日志操作，特点：存储容量更小
	### Ndb cluster 是mysql集群使用的存储引擎，支持事务，行级锁，Mysql是内存型的集群，大部分数据存到内存中

## 字段类型的选择
	例如：
		birthday 字段可以选择四种类型进行存储：char(10),varchar(20),datetime,int
		
		数据类型会影响到存储空间的开销，也会影响到数据的查询性能。
		当一个列可以选择多种数据类型的时候，优先选择数字类型，其次选择日期和二进制类型，
		最后是字符串类型。
		对于相同级别的数据类型，应该优先选择占用空间小的数据类型。
		
		所以，birthday，最佳的选择是int类型，其次是datetime类型，对于相同级别的char和varchar
		优选选择char类型进行存储。
		
	选择原则主要由两个角度：
		第一，在数据进行比较（查询条件，join及排序）操作时，同样的数据，字符往往比数字处理得慢；
		第二，在数据库中，数据处理以页为单位，列的长度越小，利于性能提升。
	
	数据库最大的瓶颈是io，优化了io，就是优化了性能。
	
## char 和 varchar
	1 如果列中要存储的数据长度差不多一致，则应该考虑用char，否则应该考虑用varchar；
		像省份证号、手机号，可以用char存储
		
	2、如果列中的最大数据长度小于50Byte，则一般也考虑用char
		（当然，如果这个列很少用，则基于节省空间和减少IO的考虑，还可以考虑用varchar）
		
	3、一般不宜定义大于50byte的char类型。大于50byte的最好使用varchar
	
## decimal和float 如何选择
	1、decimal是用来存储精确数据的，float用来存储非精确数据的；
		如果存储的是精确的小数点最好用decimal不要用float
	
	2、float存储空间比decimal要小，

## 时间类型如何存储
	int的长度比datetime要小，int占4个字节，datetime占8个字节；
	int作为存储时间的类型，在使用的时候要进行转换，使用的时候不方便。所以如果经常要使用到的用datetime来存储，
	int存储范围有限制，最大存储到2038年1月19日
	
	还要考虑时间存储的粒度
	年月日时分秒周
	
	
## 如何选主键
  一定要定义一个主键
  
## 外键
	在高并发的应用中，不建议使用外键，但一定要建立索引

## 触发器
	尽可能不适用触发器
	
## 预留字段
	严禁使用预留字段

## 反范式设计
	为了性能和读取效率的考虑二适当的对第三范式的要求进行违反，而允许少量的数据冗余
	（利用空间换时间）
	
	
## 数据库的维护和优化要做的事情
	1、维护数据字典
	2、维护索引
	3、维护表结构；
	4、适当的时候对表进行水平和垂直拆分；
		随着数据量的不断增长，数据在表中的存储是有一个瓶颈的，当超过一个量级之后，我们的查询就会变得非常缓慢，
		这时候就要对表进行拆分，拆分的方式有两种：水平拆分和垂直拆分；

## 维护数据字典
	1、第三方工具；
	2、利用数据库本身的备注字段来维护数据字典
		commit

## 维护索引
	1、索引不是越多越好；
	2、定期维护索引碎片
	3、mysql中不要使用强制索引；
	
	
## 维护表结构

## 数据库适合的操作
	1、数据库适合做批量操作，逐条操作适合在程序中完成；
	2、少select *的查询：
		因为造成io的浪费，查询出大量不使用的字段，另外，如果表结构进行了变更，可能会对程序造成影响；
	3、控制使用自定义函数；
		因为大量使用自定义函数可能会对索引造成影响；
	4、不要使用数据库中的全文索引
		使用搜索引擎工具代替使用全文索引
		
		
## 表的拆分
	1 水平拆分：解决了表中数据量太大的问题
		一种做法，对主键取hash值拆分成不同的表；
		
		
	2 垂直拆分：解决了表太宽的问题；
		数据库是以页来存储，太宽了，一页存储的数据量就会少；
	
	
